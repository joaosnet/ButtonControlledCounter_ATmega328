
contador00a29.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000284  00000318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000284  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080010a  0080010a  00000322  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000322  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000354  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000899  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000750  00000000  00000000  00000c75  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000039c  00000000  00000000  000013c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00001764  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000459  00000000  00000000  00001824  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000019d  00000000  00000000  00001c7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001e1a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e8       	ldi	r30, 0x84	; 132
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 30       	cpi	r26, 0x0B	; 11
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <main>
  9e:	0c 94 40 01 	jmp	0x280	; 0x280 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <inicializarShiftRegisters>:
volatile uint8_t estadoBotaoB = 0;

// Função para inicializar os registradores de deslocamento
void inicializarShiftRegisters() {
    // Configurar os pinos como saída
    DDRB |= (1 << DS_PINO) | (1 << SH_CP_PINO) | (1 << ST_CP_PINO);
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	87 60       	ori	r24, 0x07	; 7
  aa:	84 b9       	out	0x04, r24	; 4
  ac:	08 95       	ret

000000ae <enviarByte>:
}

// Função para enviar um byte para os registradores de deslocamento
void enviarByte(uint8_t dado) {
    for (int i = 7; i >= 0; i--) {
  ae:	27 e0       	ldi	r18, 0x07	; 7
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	19 c0       	rjmp	.+50     	; 0xe6 <enviarByte+0x38>
        // Configurar o pino de dados (DS)
        if (dado & (1 << i)) {
  b4:	48 2f       	mov	r20, r24
  b6:	50 e0       	ldi	r21, 0x00	; 0
  b8:	02 2e       	mov	r0, r18
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <enviarByte+0x12>
  bc:	55 95       	asr	r21
  be:	47 95       	ror	r20
  c0:	0a 94       	dec	r0
  c2:	e2 f7       	brpl	.-8      	; 0xbc <enviarByte+0xe>
  c4:	40 ff       	sbrs	r20, 0
  c6:	04 c0       	rjmp	.+8      	; 0xd0 <enviarByte+0x22>
            PORTB |= (1 << DS_PINO);
  c8:	95 b1       	in	r25, 0x05	; 5
  ca:	91 60       	ori	r25, 0x01	; 1
  cc:	95 b9       	out	0x05, r25	; 5
  ce:	03 c0       	rjmp	.+6      	; 0xd6 <enviarByte+0x28>
        } else {
            PORTB &= ~(1 << DS_PINO);
  d0:	95 b1       	in	r25, 0x05	; 5
  d2:	9e 7f       	andi	r25, 0xFE	; 254
  d4:	95 b9       	out	0x05, r25	; 5
        }

        // Pulsar o pino de clock (SH_CP)
        PORTB |= (1 << SH_CP_PINO);
  d6:	95 b1       	in	r25, 0x05	; 5
  d8:	92 60       	ori	r25, 0x02	; 2
  da:	95 b9       	out	0x05, r25	; 5
        PORTB &= ~(1 << SH_CP_PINO);
  dc:	95 b1       	in	r25, 0x05	; 5
  de:	9d 7f       	andi	r25, 0xFD	; 253
  e0:	95 b9       	out	0x05, r25	; 5
    DDRB |= (1 << DS_PINO) | (1 << SH_CP_PINO) | (1 << ST_CP_PINO);
}

// Função para enviar um byte para os registradores de deslocamento
void enviarByte(uint8_t dado) {
    for (int i = 7; i >= 0; i--) {
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	31 09       	sbc	r19, r1
  e6:	33 23       	and	r19, r19
  e8:	2c f7       	brge	.-54     	; 0xb4 <enviarByte+0x6>
        PORTB |= (1 << SH_CP_PINO);
        PORTB &= ~(1 << SH_CP_PINO);
    }

    // Pulsar o pino de latch (ST_CP)
    PORTB |= (1 << ST_CP_PINO);
  ea:	85 b1       	in	r24, 0x05	; 5
  ec:	84 60       	ori	r24, 0x04	; 4
  ee:	85 b9       	out	0x05, r24	; 5
    PORTB &= ~(1 << ST_CP_PINO);
  f0:	85 b1       	in	r24, 0x05	; 5
  f2:	8b 7f       	andi	r24, 0xFB	; 251
  f4:	85 b9       	out	0x05, r24	; 5
  f6:	08 95       	ret

000000f8 <atualizarDisplay>:
    0b10000000, // 8
    0b10010000  // 9
};

// Função para atualizar os displays de sete segmentos
void atualizarDisplay() {
  f8:	0f 93       	push	r16
  fa:	1f 93       	push	r17
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	00 d0       	rcall	.+0      	; 0x102 <atualizarDisplay+0xa>
 102:	cd b7       	in	r28, 0x3d	; 61
 104:	de b7       	in	r29, 0x3e	; 62
    // Mapear os dígitos e enviar para os registradores de deslocamento
    uint8_t digitos[2] = {mapaSeteSegmentos[contador / 10], mapaSeteSegmentos[contador % 10]};
 106:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
 10a:	8d ec       	ldi	r24, 0xCD	; 205
 10c:	e8 9f       	mul	r30, r24
 10e:	e1 2d       	mov	r30, r1
 110:	11 24       	eor	r1, r1
 112:	e6 95       	lsr	r30
 114:	e6 95       	lsr	r30
 116:	e6 95       	lsr	r30
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	e0 50       	subi	r30, 0x00	; 0
 11c:	ff 4f       	sbci	r31, 0xFF	; 255
 11e:	90 81       	ld	r25, Z
 120:	99 83       	std	Y+1, r25	; 0x01
 122:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
 126:	e8 9f       	mul	r30, r24
 128:	81 2d       	mov	r24, r1
 12a:	11 24       	eor	r1, r1
 12c:	86 95       	lsr	r24
 12e:	86 95       	lsr	r24
 130:	86 95       	lsr	r24
 132:	88 0f       	add	r24, r24
 134:	98 2f       	mov	r25, r24
 136:	99 0f       	add	r25, r25
 138:	99 0f       	add	r25, r25
 13a:	89 0f       	add	r24, r25
 13c:	e8 1b       	sub	r30, r24
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	e0 50       	subi	r30, 0x00	; 0
 142:	ff 4f       	sbci	r31, 0xFF	; 255
 144:	80 81       	ld	r24, Z
 146:	8a 83       	std	Y+2, r24	; 0x02
    
    for (int i = 0; i < 2; i++) {
 148:	00 e0       	ldi	r16, 0x00	; 0
 14a:	10 e0       	ldi	r17, 0x00	; 0
 14c:	0b c0       	rjmp	.+22     	; 0x164 <atualizarDisplay+0x6c>
        // Enviar o código do dígito para os displays de sete segmentos
        enviarByte(digitos[i]);
 14e:	e1 e0       	ldi	r30, 0x01	; 1
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	ec 0f       	add	r30, r28
 154:	fd 1f       	adc	r31, r29
 156:	e0 0f       	add	r30, r16
 158:	f1 1f       	adc	r31, r17
 15a:	80 81       	ld	r24, Z
 15c:	0e 94 57 00 	call	0xae	; 0xae <enviarByte>
// Função para atualizar os displays de sete segmentos
void atualizarDisplay() {
    // Mapear os dígitos e enviar para os registradores de deslocamento
    uint8_t digitos[2] = {mapaSeteSegmentos[contador / 10], mapaSeteSegmentos[contador % 10]};
    
    for (int i = 0; i < 2; i++) {
 160:	0f 5f       	subi	r16, 0xFF	; 255
 162:	1f 4f       	sbci	r17, 0xFF	; 255
 164:	02 30       	cpi	r16, 0x02	; 2
 166:	11 05       	cpc	r17, r1
 168:	94 f3       	brlt	.-28     	; 0x14e <atualizarDisplay+0x56>
        // Enviar o código do dígito para os displays de sete segmentos
        enviarByte(digitos[i]);
    }
}
 16a:	0f 90       	pop	r0
 16c:	0f 90       	pop	r0
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	08 95       	ret

00000178 <configurarInterrupcoes>:

// Configurar e inicializar as interrupções
void configurarInterrupcoes() {
    // Configurar os pinos dos botões como entrada
    DDRD &= ~((1 << BOTAO_A_PINO) | (1 << BOTAO_B_PINO));
 178:	8a b1       	in	r24, 0x0a	; 10
 17a:	8f 7c       	andi	r24, 0xCF	; 207
 17c:	8a b9       	out	0x0a, r24	; 10
    // Ativar resistores de pull-up para os botões
    PORTD |= (1 << BOTAO_A_PINO) | (1 << BOTAO_B_PINO);
 17e:	8b b1       	in	r24, 0x0b	; 11
 180:	80 63       	ori	r24, 0x30	; 48
 182:	8b b9       	out	0x0b, r24	; 11

    // Configurar a interrupção para o botão A (PCINT20)
    PCICR |= (1 << PCIE2);
 184:	e8 e6       	ldi	r30, 0x68	; 104
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	80 81       	ld	r24, Z
 18a:	84 60       	ori	r24, 0x04	; 4
 18c:	80 83       	st	Z, r24
    PCMSK2 |= (1 << PCINT20);
 18e:	ed e6       	ldi	r30, 0x6D	; 109
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	80 61       	ori	r24, 0x10	; 16
 196:	80 83       	st	Z, r24

    // Configurar a interrupção para o botão B (PCINT21)
    PCMSK2 |= (1 << PCINT21);
 198:	80 81       	ld	r24, Z
 19a:	80 62       	ori	r24, 0x20	; 32
 19c:	80 83       	st	Z, r24

    // Ativar interrupções globais
    sei();
 19e:	78 94       	sei
 1a0:	08 95       	ret

000001a2 <main>:
}

int main(void) {
    inicializarShiftRegisters();
 1a2:	0e 94 53 00 	call	0xa6	; 0xa6 <inicializarShiftRegisters>
    configurarInterrupcoes();
 1a6:	0e 94 bc 00 	call	0x178	; 0x178 <configurarInterrupcoes>

    while (1) {
        // Atualizar os displays de sete segmentos
        atualizarDisplay();
 1aa:	0e 94 7c 00 	call	0xf8	; 0xf8 <atualizarDisplay>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ae:	2f ef       	ldi	r18, 0xFF	; 255
 1b0:	80 e7       	ldi	r24, 0x70	; 112
 1b2:	92 e0       	ldi	r25, 0x02	; 2
 1b4:	21 50       	subi	r18, 0x01	; 1
 1b6:	80 40       	sbci	r24, 0x00	; 0
 1b8:	90 40       	sbci	r25, 0x00	; 0
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <main+0x12>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <main+0x1c>
 1be:	00 00       	nop
 1c0:	f4 cf       	rjmp	.-24     	; 0x1aa <main+0x8>

000001c2 <__vector_5>:

    return 0;
}

// Rotina de interrupção para os botões A e B (PCINT20 e PCINT21)
ISR(PCINT2_vect) {
 1c2:	1f 92       	push	r1
 1c4:	0f 92       	push	r0
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	0f 92       	push	r0
 1ca:	11 24       	eor	r1, r1
 1cc:	5f 93       	push	r21
 1ce:	6f 93       	push	r22
 1d0:	7f 93       	push	r23
 1d2:	8f 93       	push	r24
 1d4:	9f 93       	push	r25
 1d6:	af 93       	push	r26
 1d8:	bf 93       	push	r27
 1da:	8f e1       	ldi	r24, 0x1F	; 31
 1dc:	9e e4       	ldi	r25, 0x4E	; 78
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <__vector_5+0x1c>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <__vector_5+0x22>
 1e4:	00 00       	nop
    _delay_ms(10); // Debounce
    if (!(PIND & (1 << BOTAO_A_PINO))) {
 1e6:	4c 99       	sbic	0x09, 4	; 9
 1e8:	0a c0       	rjmp	.+20     	; 0x1fe <__vector_5+0x3c>
        // Incrementar o contador
        contador = (contador + 1) % 30;
 1ea:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	01 96       	adiw	r24, 0x01	; 1
 1f2:	6e e1       	ldi	r22, 0x1E	; 30
 1f4:	70 e0       	ldi	r23, 0x00	; 0
 1f6:	0e 94 18 01 	call	0x230	; 0x230 <__divmodhi4>
 1fa:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
    }
    if (!(PIND & (1 << BOTAO_B_PINO))) {
 1fe:	4d 99       	sbic	0x09, 5	; 9
 200:	0b c0       	rjmp	.+22     	; 0x218 <__vector_5+0x56>
        // Decrementar o contador
        contador = (contador == 0) ? 29 : contador - 1;
 202:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 206:	88 23       	and	r24, r24
 208:	21 f0       	breq	.+8      	; 0x212 <__vector_5+0x50>
 20a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 20e:	81 50       	subi	r24, 0x01	; 1
 210:	01 c0       	rjmp	.+2      	; 0x214 <__vector_5+0x52>
 212:	8d e1       	ldi	r24, 0x1D	; 29
 214:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
    }
 218:	bf 91       	pop	r27
 21a:	af 91       	pop	r26
 21c:	9f 91       	pop	r25
 21e:	8f 91       	pop	r24
 220:	7f 91       	pop	r23
 222:	6f 91       	pop	r22
 224:	5f 91       	pop	r21
 226:	0f 90       	pop	r0
 228:	0f be       	out	0x3f, r0	; 63
 22a:	0f 90       	pop	r0
 22c:	1f 90       	pop	r1
 22e:	18 95       	reti

00000230 <__divmodhi4>:
 230:	97 fb       	bst	r25, 7
 232:	07 2e       	mov	r0, r23
 234:	16 f4       	brtc	.+4      	; 0x23a <__divmodhi4+0xa>
 236:	00 94       	com	r0
 238:	07 d0       	rcall	.+14     	; 0x248 <__divmodhi4_neg1>
 23a:	77 fd       	sbrc	r23, 7
 23c:	09 d0       	rcall	.+18     	; 0x250 <__divmodhi4_neg2>
 23e:	0e 94 2c 01 	call	0x258	; 0x258 <__udivmodhi4>
 242:	07 fc       	sbrc	r0, 7
 244:	05 d0       	rcall	.+10     	; 0x250 <__divmodhi4_neg2>
 246:	3e f4       	brtc	.+14     	; 0x256 <__divmodhi4_exit>

00000248 <__divmodhi4_neg1>:
 248:	90 95       	com	r25
 24a:	81 95       	neg	r24
 24c:	9f 4f       	sbci	r25, 0xFF	; 255
 24e:	08 95       	ret

00000250 <__divmodhi4_neg2>:
 250:	70 95       	com	r23
 252:	61 95       	neg	r22
 254:	7f 4f       	sbci	r23, 0xFF	; 255

00000256 <__divmodhi4_exit>:
 256:	08 95       	ret

00000258 <__udivmodhi4>:
 258:	aa 1b       	sub	r26, r26
 25a:	bb 1b       	sub	r27, r27
 25c:	51 e1       	ldi	r21, 0x11	; 17
 25e:	07 c0       	rjmp	.+14     	; 0x26e <__udivmodhi4_ep>

00000260 <__udivmodhi4_loop>:
 260:	aa 1f       	adc	r26, r26
 262:	bb 1f       	adc	r27, r27
 264:	a6 17       	cp	r26, r22
 266:	b7 07       	cpc	r27, r23
 268:	10 f0       	brcs	.+4      	; 0x26e <__udivmodhi4_ep>
 26a:	a6 1b       	sub	r26, r22
 26c:	b7 0b       	sbc	r27, r23

0000026e <__udivmodhi4_ep>:
 26e:	88 1f       	adc	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	5a 95       	dec	r21
 274:	a9 f7       	brne	.-22     	; 0x260 <__udivmodhi4_loop>
 276:	80 95       	com	r24
 278:	90 95       	com	r25
 27a:	bc 01       	movw	r22, r24
 27c:	cd 01       	movw	r24, r26
 27e:	08 95       	ret

00000280 <_exit>:
 280:	f8 94       	cli

00000282 <__stop_program>:
 282:	ff cf       	rjmp	.-2      	; 0x282 <__stop_program>
